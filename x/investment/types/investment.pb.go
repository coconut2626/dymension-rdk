// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coco/investment/investment.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Investment struct {
	// investor_address is the bech32-encoded address of the investor.
	InvestorAddress string `protobuf:"bytes,1,opt,name=investor_address,json=investorAddress,proto3" json:"investor_address,omitempty"`
	// gamebank_address is the bech32-encoded address of the game bank.
	GamebankAddress string `protobuf:"bytes,2,opt,name=gamebank_address,json=gamebankAddress,proto3" json:"gamebank_address,omitempty"`
	Denom           string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	// shares define the investment shares received.
	Shares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=shares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shares"`
}

func (m *Investment) Reset()         { *m = Investment{} }
func (m *Investment) String() string { return proto.CompactTextString(m) }
func (*Investment) ProtoMessage()    {}
func (*Investment) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ea4bbe39661275c, []int{0}
}
func (m *Investment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Investment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Investment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Investment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Investment.Merge(m, src)
}
func (m *Investment) XXX_Size() int {
	return m.Size()
}
func (m *Investment) XXX_DiscardUnknown() {
	xxx_messageInfo_Investment.DiscardUnknown(m)
}

var xxx_messageInfo_Investment proto.InternalMessageInfo

type GameBank struct {
	GamebankAddress string                                 `protobuf:"bytes,1,opt,name=gamebank_address,json=gamebankAddress,proto3" json:"gamebank_address,omitempty"`
	InvestorAddress string                                 `protobuf:"bytes,2,opt,name=investor_address,json=investorAddress,proto3" json:"investor_address,omitempty"`
	Denom           string                                 `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Tokens          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens"`
	// investor_shares defines total shares issued to a game banks's investor.
	InvestorShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=investor_shares,json=investorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"investor_shares"`
}

func (m *GameBank) Reset()         { *m = GameBank{} }
func (m *GameBank) String() string { return proto.CompactTextString(m) }
func (*GameBank) ProtoMessage()    {}
func (*GameBank) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ea4bbe39661275c, []int{1}
}
func (m *GameBank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBank.Merge(m, src)
}
func (m *GameBank) XXX_Size() int {
	return m.Size()
}
func (m *GameBank) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBank.DiscardUnknown(m)
}

var xxx_messageInfo_GameBank proto.InternalMessageInfo

func (m *GameBank) GetGamebankAddress() string {
	if m != nil {
		return m.GamebankAddress
	}
	return ""
}

func (m *GameBank) GetInvestorAddress() string {
	if m != nil {
		return m.InvestorAddress
	}
	return ""
}

func (m *GameBank) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*Investment)(nil), "coco.investment.Investment")
	proto.RegisterType((*GameBank)(nil), "coco.investment.GameBank")
}

func init() { proto.RegisterFile("coco/investment/investment.proto", fileDescriptor_9ea4bbe39661275c) }

var fileDescriptor_9ea4bbe39661275c = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xce, 0x4f, 0xce,
	0xd7, 0xcf, 0xcc, 0x2b, 0x4b, 0x2d, 0x2e, 0xc9, 0x4d, 0xcd, 0x2b, 0x41, 0x62, 0xea, 0x15, 0x14,
	0xe5, 0x97, 0xe4, 0x0b, 0xf1, 0x83, 0x54, 0xe8, 0x21, 0x84, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3,
	0xc1, 0x72, 0xfa, 0x20, 0x16, 0x44, 0x99, 0x94, 0x64, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x71, 0x3c,
	0x44, 0x02, 0xc2, 0x81, 0x48, 0x29, 0xf5, 0x30, 0x71, 0x71, 0x79, 0xc2, 0xf5, 0x0b, 0x39, 0x73,
	0x09, 0x40, 0x4c, 0xcb, 0x2f, 0x8a, 0x4f, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x96, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x74, 0x92, 0xb8, 0xb4, 0x45, 0x57, 0x04, 0xaa, 0xd5, 0x11, 0x22, 0x13, 0x5c,
	0x52, 0x94, 0x99, 0x97, 0x1e, 0xc4, 0x0f, 0xd3, 0x01, 0x15, 0x06, 0x19, 0x92, 0x9e, 0x98, 0x9b,
	0x9a, 0x94, 0x98, 0x97, 0x0d, 0x37, 0x84, 0x89, 0x90, 0x21, 0x30, 0x1d, 0x30, 0x43, 0x44, 0xb8,
	0x58, 0x53, 0x52, 0xf3, 0xf2, 0x73, 0x25, 0x98, 0x41, 0x3a, 0x83, 0x20, 0x1c, 0xa1, 0x10, 0x2e,
	0xb6, 0xe2, 0x8c, 0xc4, 0xa2, 0xd4, 0x62, 0x09, 0x16, 0xb0, 0x81, 0x36, 0x27, 0xee, 0xc9, 0x33,
	0xdc, 0xba, 0x27, 0xaf, 0x96, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0x0b, 0xf5,
	0x1f, 0x94, 0xd2, 0x2d, 0x4e, 0xc9, 0xd6, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x73, 0x49, 0x4d,
	0xbe, 0xb4, 0x45, 0x97, 0x0b, 0x6a, 0xbd, 0x4b, 0x6a, 0x72, 0x10, 0xd4, 0x2c, 0x2b, 0x8e, 0x8e,
	0x05, 0xf2, 0x0c, 0x2f, 0x16, 0xc8, 0x33, 0x28, 0x3d, 0x67, 0xe2, 0xe2, 0x70, 0x4f, 0xcc, 0x4d,
	0x75, 0x4a, 0xcc, 0xcb, 0xc6, 0xea, 0x0f, 0x46, 0x52, 0xfd, 0x81, 0x2d, 0x44, 0x99, 0x48, 0x0d,
	0x51, 0x9c, 0x81, 0x51, 0x92, 0x9f, 0x9d, 0x9a, 0x47, 0x4e, 0x60, 0x78, 0xe6, 0x95, 0x20, 0x05,
	0x86, 0x67, 0x5e, 0x49, 0x10, 0xd4, 0x2c, 0xa1, 0x54, 0x2e, 0xb8, 0xf5, 0xf1, 0xd0, 0xb0, 0x66,
	0xa5, 0x42, 0x58, 0xf3, 0xc1, 0x0c, 0x0d, 0x06, 0x9b, 0xe9, 0xe4, 0x7b, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xc6, 0xe9, 0x99, 0x25, 0x39, 0x89, 0x10, 0xf3, 0xab, 0xb2,
	0xd3, 0x13, 0x8b, 0x52, 0x8c, 0xf3, 0xf4, 0x41, 0x09, 0x5d, 0x37, 0x2f, 0xb5, 0xa4, 0x3c, 0xbf,
	0x28, 0x5b, 0xbf, 0x02, 0x39, 0x53, 0x80, 0x2d, 0x4c, 0x62, 0x03, 0x27, 0x67, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x64, 0xe0, 0x5f, 0x2d, 0x34, 0x03, 0x00, 0x00,
}

func (m *Investment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Investment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Investment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInvestment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintInvestment(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GamebankAddress) > 0 {
		i -= len(m.GamebankAddress)
		copy(dAtA[i:], m.GamebankAddress)
		i = encodeVarintInvestment(dAtA, i, uint64(len(m.GamebankAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InvestorAddress) > 0 {
		i -= len(m.InvestorAddress)
		copy(dAtA[i:], m.InvestorAddress)
		i = encodeVarintInvestment(dAtA, i, uint64(len(m.InvestorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GameBank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InvestorShares.Size()
		i -= size
		if _, err := m.InvestorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInvestment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInvestment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintInvestment(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InvestorAddress) > 0 {
		i -= len(m.InvestorAddress)
		copy(dAtA[i:], m.InvestorAddress)
		i = encodeVarintInvestment(dAtA, i, uint64(len(m.InvestorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GamebankAddress) > 0 {
		i -= len(m.GamebankAddress)
		copy(dAtA[i:], m.GamebankAddress)
		i = encodeVarintInvestment(dAtA, i, uint64(len(m.GamebankAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInvestment(dAtA []byte, offset int, v uint64) int {
	offset -= sovInvestment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Investment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvestorAddress)
	if l > 0 {
		n += 1 + l + sovInvestment(uint64(l))
	}
	l = len(m.GamebankAddress)
	if l > 0 {
		n += 1 + l + sovInvestment(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovInvestment(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovInvestment(uint64(l))
	return n
}

func (m *GameBank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GamebankAddress)
	if l > 0 {
		n += 1 + l + sovInvestment(uint64(l))
	}
	l = len(m.InvestorAddress)
	if l > 0 {
		n += 1 + l + sovInvestment(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovInvestment(uint64(l))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovInvestment(uint64(l))
	l = m.InvestorShares.Size()
	n += 1 + l + sovInvestment(uint64(l))
	return n
}

func sovInvestment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInvestment(x uint64) (n int) {
	return sovInvestment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Investment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvestment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Investment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Investment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvestorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvestorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GamebankAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GamebankAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvestment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvestment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvestment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameBank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameBank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GamebankAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GamebankAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvestorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvestorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvestorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvestment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvestment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InvestorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvestment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvestment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInvestment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInvestment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvestment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInvestment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInvestment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInvestment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInvestment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInvestment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInvestment = fmt.Errorf("proto: unexpected end of group")
)
